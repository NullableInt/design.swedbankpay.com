// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Documentation: Buttons Active State renders 1`] = `
<Fragment>
  <h2
    id="active-state"
  >
    Active state
  </h2>
  <p>
    Buttons will appear pressed (with a darker background, darker border, and inset shadow) when active. 
    <b>
      There’s no need to add a class to 
      <PrismCode
        className="language-html"
        component="code"
      >
        &lt;button&gt;
      </PrismCode>
      s as they use a pseudo-class.
    </b>
     However, you can still force the same active appearance with 
    <Property
      value=".active"
    />
     (and include the 
    <Attribute
      name="aria-pressed"
      value="true"
    />
     attribute) should you need to replicate the state programmatically.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        active={true}
        href="#"
        label="Primary"
        type="primary"
      />
      

      <Button
        active={true}
        href="#"
        label="Secondary"
        type="secondary"
      />
      

      <Button
        active={true}
        href="#"
        label="Danger"
        type="danger"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Button Loader renders 1`] = `
<Fragment>
  <h2
    id="button-loader"
  >
    Button loader
  </h2>
  <p>
    To use a button with a loader simply add the attribute 
    <Attribute
      data={true}
      name="button-loader"
    />
     to add the required markup for the loader component. Add class 
    <Property
      value=".loading"
    />
     to display the loader.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Primary"
        loader={true}
        loading={true}
        type="primary"
      />
      

      <Button
        label="Secondary"
        loader={true}
        loading={true}
        type="secondary"
      />
      

      <Button
        label="Danger"
        loader={true}
        loading={true}
        type="danger"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Disabled loader
  </h3>
  <p>
    <Property
      value=".loading"
    />
     with 
    <Attribute
      name="disabled"
    />
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        disabled={true}
        label="Primary"
        loader={true}
        loading={true}
        type="primary"
      />
      

      <Button
        disabled={true}
        label="Secondary"
        loader={true}
        loading={true}
        type="secondary"
      />
      

      <Button
        disabled={true}
        label="Danger"
        loader={true}
        loading={true}
        type="danger"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Outline loader
  </h3>
  <p>
    <Property
      value=".loading"
    />
     with 
    <Property
      value=".outline"
    />
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Primary"
        loader={true}
        loading={true}
        outline={true}
        type="primary"
      />
      

      <Button
        label="Secondary"
        loader={true}
        loading={true}
        outline={true}
        type="secondary"
      />
      

      <Button
        label="Danger"
        loader={true}
        loading={true}
        outline={true}
        type="danger"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    The markup
  </h3>
  <p>
    Adding the attribute 
    <Attribute
      data={true}
      name="button-loader"
    />
     to a button component will produce the following html:
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
  >
    <button
      className="btn btn-default loading"
      data-button-loader={true}
      type="button"
    >
      
	
      Default
      
	
      <div
        className="loader"
      >
        
		
        <ul
          className="loader-icon"
        >
          
			
          <li />
          
			
          <li />
          
			
          <li />
          
		
        </ul>
        
	
      </div>
      

    </button>
  </ComponentPreview>
  <Alert
    type="warning"
  >
    <h5>
      Including the loader html
    </h5>
    <p>
      If you want more control over the loader component you can include the html yourself (e.g. for server-side rendering), just make sure you do 
      <b>
        not
      </b>
       add the attribute 
      <Attribute
        data={true}
        name="button-loader"
      />
      .
    </p>
  </Alert>
  <h3>
    JavascriptMethods
  </h3>
  <p>
    Only button loaders have to be initialized.
  </p>
  <JavascriptDocs
    componentName="button"
  />
</Fragment>
`;

exports[`Documentation: Buttons Button group renders 1`] = `
<Fragment>
  <h2
    id="button-group"
  >
    Using buttons together
  </h2>
  <p>
    When you use buttons next to each other you have to wrap them in a 
    <Property
      value=".button-group"
    />
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Activate"
        type="primary"
      />
      

      <Button
        label="Disable"
        type="secondary"
      />
      

      <Button
        label="Delete"
        type="danger"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons ButtonGroup renders 1`] = `
<Fragment>
  <h2
    id="button-group"
  >
    Using buttons together
  </h2>
  <p>
    When you use buttons next to each other you have to wrap them in a 
    <Property
      value=".button-group"
    />
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Activate"
        type="primary"
      />
      

      <Button
        label="Disable"
        type="secondary"
      />
      

      <Button
        label="Delete"
        type="danger"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Disabled State renders 1`] = `
<Fragment>
  <h2
    id="disabled-state"
  >
    Disabled state
  </h2>
  <p>
    Make buttons look inactive by adding the 
    <Attribute
      name="disabled"
    />
     boolean attribute to any 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;button&gt;
    </PrismCode>
     element.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        disabled={true}
        label="Primary"
        type="primary"
      />
      

      <Button
        disabled={true}
        label="Secondary"
        type="secondary"
      />
      

      <Button
        disabled={true}
        label="Danger"
        type="danger"
      />
      

    </div>
  </ComponentPreview>
  <p>
    Disabled buttons using the 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;a&gt;
    </PrismCode>
     element behave a bit different:
  </p>
  <ul>
    <li>
      <PrismCode
        className="language-html"
        component="code"
      >
        &lt;a&gt;
      </PrismCode>
      s do not support the 
      <Attribute
        name="disabled"
      />
      attribute, so you must add the 
      <Property
        value=".disabled"
      />
       class to make it visually appear disabled.
    </li>
    <li>
      Some future-friendly styles are included to disable all 
      <Property
        value="pointer-events"
      />
       on anchor buttons. In browsers which support that property, you won’t see the disabled cursor at all.
    </li>
    <li>
      Disabled buttons should include the 
      <Attribute
        name="aria-disabled"
        value="true"
      />
       attribute to indicate the state of the element to assistive technologies.
    </li>
  </ul>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        disabled={true}
        href="#"
        label="Primary"
        type="primary"
      />
      

      <Button
        disabled={true}
        href="#"
        label="Secondary"
        type="secondary"
      />
      

      <Button
        disabled={true}
        href="#"
        label="Danger"
        type="danger"
      />
      

    </div>
  </ComponentPreview>
  <Alert
    type="warning"
  >
    <h5>
      Link functionality caveat
    </h5>
    <p>
      The 
      <Property
        value=".disabled"
      />
       class uses 
      <Property
        value="pointer-events: none"
      />
       to try to disable the link functionality of 
      <PrismCode
        className="language-html"
        component="code"
      >
        &lt;a&gt;
      </PrismCode>
      s, but that CSS property is not yet standardized. In addition, even in browsers that do support 
      <Property
        value="pointer-events: none"
      />
      , keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. So to be safe, add a 
      <Property
        value="tabindex=\\"-1\\""
      />
       attribute on these links (to prevent them from receiving keyboard focus) and use custom JavaScript to disable their functionality.
    </p>
  </Alert>
</Fragment>
`;

exports[`Documentation: Buttons Examples renders 1`] = `
<Fragment>
  <h2
    id="examples"
  >
    Examples
  </h2>
  <p>
    The DesignGuide includes a few predefined button styles, each serving its own semantic purpose.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Primary"
        type="primary"
      />
      

      <Button
        label="Secondary"
        type="secondary"
      />
      

      <Button
        label="Danger"
        type="danger"
      />
      

      <Button
        label="Link"
        type="link"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Outline Buttons renders 1`] = `
<Fragment>
  <h2
    id="outline-buttons"
  >
    Outline buttons
  </h2>
  <p>
    Replace the default modifier classes with the 
    <Property
      value=".btn-outline-{style}"
    />
     ones to get an outline of the button style.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Primary"
        outline={true}
        type="primary"
      />
      

      <Button
        label="Secondary"
        outline={true}
        type="secondary"
      />
      

      <Button
        label="Danger"
        outline={true}
        type="danger"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Sizes renders 1`] = `
<Fragment>
  <h2
    id="sizes"
  >
    Sizes
  </h2>
  <p>
    For a different sized button add 
    <Property
      value=".btn-lg"
    />
    , 
    <Property
      value=".btn-sm"
    />
     or 
    <Property
      value=".btn-xs"
    />
    .
  </p>
  <h3>
    Large
  </h3>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Large button"
        size="lg"
        type="primary"
      />
      

      <Button
        label="Large button"
        size="lg"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Small
  </h3>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Small button"
        size="sm"
        type="primary"
      />
      

      <Button
        label="Small button"
        size="sm"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Extra small
  </h3>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Extra small button"
        size="xs"
        type="primary"
      />
      

      <Button
        label="Extra small button"
        size="xs"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Block level
  </h3>
  <p>
    Create block level buttons—those that span the full width of a parent by adding 
    <Property
      value=".btn-block"
    />
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        fullWidth={true}
        label="Block level button"
        type="primary"
      />
      

      <Button
        fullWidth={true}
        label="Block level button"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Usage With Icons renders 1`] = `
<Fragment>
  <h2
    id="usage-with-icons"
  >
    Usage with icons
  </h2>
  <p>
    To use a button with an icon simply put the icon markup inside the 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;button&gt;
    </PrismCode>
    .
  </p>
  <p>
    Read more about icon usage here 
    <Link
      to="/docs/core/icons"
    >
      here
    </Link>
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        icon="cloud"
        label="Primary"
        type="primary"
      />
      


      <Button
        icon="cloud"
        label="Secondary"
        type="secondary"
      />
      

      <Button
        icon="cloud"
        label="Danger"
        type="danger"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Usage With Other Tags renders 1`] = `
<Fragment>
  <h2
    id="usage-with-other-tags"
  >
    Usage with other tags
  </h2>
  <p>
    The 
    <Property
      value=".btn"
    />
     classes are designed to be used with the 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;button&gt;
    </PrismCode>
     element. However, you can also use these classes on 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;a&gt;
    </PrismCode>
     or 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;input&gt;
    </PrismCode>
     elements (though some browsers may apply a slightly different rendering).
  </p>
  <p>
    When using button classes on 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;a&gt;
    </PrismCode>
     elements that are used to trigger in-page functionality (like collapsing content), rather than linking to new pages or sections within the current page, these links should be given a 
    <Attribute
      name="role"
      value="button"
    />
     to appropriately convey their purpose to assistive technologies such as screen readers.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        href="#"
        label="Anchor"
        type="primary"
      />
      

      <Button
        label="Button"
        type="primary"
      />
      

      <Button
        btnType="button"
        input={true}
        type="primary"
        value="Input"
      />
      

      <Button
        btnType="submit"
        input={true}
        type="primary"
        value="Submit"
      />
      

      <Button
        btnType="reset"
        input={true}
        type="primary"
        value="Reset"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons renders 1`] = `
<DocContainer
  docToc={true}
>
  <p
    className="lead"
  >
    Use our button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.
  </p>
  <Examples />
  <UsageWithOtherTags />
  <OutlineButtons />
  <ButtonGroup />
  <Sizes />
  <ActiveState />
  <DisabledState />
  <UsageWithIcons />
  <ButtonLoader />
</DocContainer>
`;
