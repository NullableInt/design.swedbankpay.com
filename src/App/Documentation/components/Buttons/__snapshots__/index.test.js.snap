// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Documentation: Buttons Active State renders 1`] = `
<Fragment>
  <h2
    id="active-state"
  >
    Active state
  </h2>
  <p>
    Active state with 
    <code
      className="token property"
    >
      .active
    </code>
    ...
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        active={true}
        label="Primary"
        type="primary"
      />
      

      <Button
        active={true}
        label="Secondary"
        type="secondary"
      />
      

      <Button
        active={true}
        label="Danger"
        type="danger"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Button Loader renders 1`] = `
<Fragment>
  <h2
    id="button-loader"
  >
    Button loader
  </h2>
  <p>
    To use a button with a loader simply add the attribute 
    <Attribute
      data={true}
      name="button-loader"
    />
     to add the required markup for the loader component. Add class 
    <code
      className="token property"
    >
      .loading
    </code>
     to display the loader.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Primary"
        loader={true}
        loading={true}
        type="primary"
      />
      

      <Button
        label="Secondary"
        loader={true}
        loading={true}
        type="secondary"
      />
      

      <Button
        label="Danger"
        loader={true}
        loading={true}
        type="danger"
      />
      

    </div>
  </ComponentPreview>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Primary"
        loader={true}
        loading={true}
        outline={true}
        type="primary"
      />
      

      <Button
        label="Secondary"
        loader={true}
        loading={true}
        outline={true}
        type="secondary"
      />
      

      <Button
        label="Danger"
        loader={true}
        loading={true}
        outline={true}
        type="danger"
      />
      

    </div>
  </ComponentPreview>
  <p>
    Adding the attribute 
    <Attribute
      data={true}
      name="button-loader"
    />
     to a button component will produce the following html:
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
  >
    <button
      className="btn btn-default loading"
      data-button-loader={true}
      type="button"
    >
      
	
      Default
      
	
      <div
        className="loader"
      >
        
		
        <ul
          className="loader-icon"
        >
          
			
          <li />
          
			
          <li />
          
			
          <li />
          
		
        </ul>
        
	
      </div>
      

    </button>
  </ComponentPreview>
  <p>
    If you want more control over the loader component you can include the html yourself (e.g. for server-side rendering), just make sure you 
    <b>
      don
      '
      t
    </b>
     add the attribute 
    <Attribute
      data={true}
      name="button-loader"
    />
    .
  </p>
</Fragment>
`;

exports[`Documentation: Buttons Buttons Text renders 1`] = `
<div
  className="col-md-12 col-lg-10 doc-body"
>
  <p
    className="lead"
  >
    Use buttons...
  </p>
  <Examples />
  <UsageWithOtherTags />
  <OutlineButtons />
  <Sizes />
  <ButtonsGroup />
  <ActiveState />
  <DisabledState />
  <UsageWithIcons />
  <ButtonLoader />
</div>
`;

exports[`Documentation: Buttons Disabled State renders 1`] = `
<Fragment>
  <h2
    id="disabled-state"
  >
    Disabled state
  </h2>
  <p>
    Disabled state with 
    <Attribute
      name="disabled"
    />
    ...
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        disabled={true}
        label="Primary"
        type="primary"
      />
      

      <Button
        disabled={true}
        label="Secondary"
        type="secondary"
      />
      

      <Button
        disabled={true}
        label="Danger"
        type="danger"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Examples renders 1`] = `
<Fragment>
  <h2
    id="examples"
  >
    Examples
  </h2>
  <p>
    Several button styles etc...
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Primary"
        type="primary"
      />
      

      <Button
        label="Secondary"
        type="secondary"
      />
      

      <Button
        label="Danger"
        type="danger"
      />
      

      <Button
        label="Link"
        type="link"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Outline Buttons renders 1`] = `
<Fragment>
  <h2
    id="outline-buttons"
  >
    Outline buttons
  </h2>
  <p>
    Several button styles etc...
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Primary"
        outline={true}
        type="primary"
      />
      

      <Button
        label="Secondary"
        outline={true}
        type="secondary"
      />
      

      <Button
        label="Danger"
        outline={true}
        type="danger"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Sizes renders 1`] = `
<Fragment>
  <h2
    id="sizes"
  >
    Sizes
  </h2>
  <p>
    Several button sizes etc...
  </p>
  <h3>
    Large buttons
  </h3>
  <p>
    ...
    <code
      className="token property"
    >
      .btn-lg
    </code>
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Large button"
        size="lg"
        type="primary"
      />
      

      <Button
        label="Large button"
        size="lg"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Small buttons
  </h3>
  <p>
    ...
    <code
      className="token property"
    >
      .btn-sm
    </code>
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Small button"
        size="sm"
        type="primary"
      />
      

      <Button
        label="Small button"
        size="sm"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Extra small buttons
  </h3>
  <p>
    ...
    <code
      className="token property"
    >
      .btn-xs
    </code>
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        label="Extra small button"
        size="xs"
        type="primary"
      />
      

      <Button
        label="Extra small button"
        size="xs"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
  <h3>
    Block level
  </h3>
  <p>
    ...
    <code
      className="token property"
    >
      .btn-block
    </code>
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        fullWidth={true}
        label="Block level button"
        type="primary"
      />
      

      <Button
        fullWidth={true}
        label="Block level button"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Usage With Icons renders 1`] = `
<Fragment>
  <h2
    id="usage-with-icons"
  >
    Usage with icons
  </h2>
  <p>
    To use a button with an icon... Read more about icon usage here 
    <Link
      replace={false}
      to="/docs/core/icons"
    >
      here
    </Link>
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        icon="cloud"
        label="Primary"
        type="primary"
      />
      


      <Button
        icon="cloud"
        label="Secondary"
        type="secondary"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons Usage With Javascript renders 1`] = `
<Fragment>
  <h2
    id="usage-with-javascript"
  >
    Usage with javascript
  </h2>
  <p>
    To interact with the alert-component with javascript...
  </p>
  <h3>
    Show loader
  </h3>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    px.button.loader.show();
    

    // OR
    

    px.button.loader.show(id);
  </ComponentPreview>
  <h3>
    Hide loader
  </h3>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    px.button.loader.hide();
    

    // OR
    

    px.button.loader.hide(id);
  </ComponentPreview>
  <h3>
    Methods
  </h3>
  <table
    className="table table-striped"
  >
    <thead>
      <tr>
        <th>
          Method
        </th>
        <th>
          Description
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <PxScript
            component="button"
            func="init"
          />
        </td>
        <td>
          Renders the HTML for the loader component for buttons that has the attribute 
          <Attribute
            data={true}
            name="loader"
          />
          . This is done automatically when the 
          <code
            className="token property"
          >
            px-script.js
          </code>
           loads, but might have to be used if you are not rendering your buttons right away. For instance, in react, you might want to call this function within the 
          <PrismCode
            className="language-javascript"
            component="code"
          >
            componentDidMount()
          </PrismCode>
           method.
        </td>
      </tr>
      <tr>
        <td>
          <PxScript
            component="button"
            func="show"
            subComponents={
              Array [
                "loader",
              ]
            }
          />
        </td>
        <td>
          Gives all rendered buttons the class 
          <code
            className="token property"
          >
            .loading
          </code>
          , displaying the loader component within the buttons (
          <b>
            if present
          </b>
          ).
        </td>
      </tr>
      <tr>
        <td>
          <PxScript
            component="button"
            func="show"
            params={
              Array [
                "id",
              ]
            }
            subComponents={
              Array [
                "loader",
              ]
            }
          />
        </td>
        <td>
          Gives the specified button the class 
          <code
            className="token property"
          >
            .loading
          </code>
          . If no alert with the specified id is rendered to the DOM, the method does nothing.
        </td>
      </tr>
      <tr>
        <td>
          <PxScript
            component="button"
            func="hide"
            subComponents={
              Array [
                "loader",
              ]
            }
          />
        </td>
        <td>
          Removes the class 
          <code
            className="token property"
          >
            .loading
          </code>
           from all rendered buttons, hiding the loader component.
        </td>
      </tr>
      <tr>
        <td>
          <PxScript
            component="button"
            func="hide"
            params={
              Array [
                "id",
              ]
            }
            subComponents={
              Array [
                "loader",
              ]
            }
          />
        </td>
        <td>
          Removes the class 
          <code
            className="token property"
          >
            .loading
          </code>
           from the button specified by id, hiding the loader component within the button. If no button with the specified id is rendered to the DOM, the method does nothing.
        </td>
      </tr>
    </tbody>
  </table>
</Fragment>
`;

exports[`Documentation: Buttons Usage With Other Tags renders 1`] = `
<Fragment>
  <h2
    id="usage-with-other-tags"
  >
    Usage with other tags
  </h2>
  <p>
    The 
    <code
      className="token property"
    >
      .btn
    </code>
     class can also be used with other html-tags like 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;a&gt;
    </PrismCode>
     or 
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;input&gt;
    </PrismCode>
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    removeOuterTag={true}
    showCasePanel={true}
  >
    <div
      className="button-group"
    >
      

      <Button
        href="#"
        label="Anchor"
        type="primary"
      />
      

      <Button
        label="Button"
        type="primary"
      />
      

      <Button
        btnType="button"
        input={true}
        type="primary"
        value="Input"
      />
      

      <Button
        btnType="submit"
        input={true}
        type="primary"
        value="Submit"
      />
      

      <Button
        btnType="reset"
        input={true}
        type="primary"
        value="Reset"
      />
      

    </div>
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Buttons renders 1`] = `
<div
  className="doc-container"
>
  <div
    className="row"
  >
    <ButtonsText />
    <DocToc
      component={[Function]}
    />
  </div>
</div>
`;
