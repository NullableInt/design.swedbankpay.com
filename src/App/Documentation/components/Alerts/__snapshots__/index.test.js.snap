// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Documentation: Alerts Alert With Icon renders 1`] = `
<React.Fragment>
  <h2
    id="icons"
  >
    Icons
  </h2>
  <p>
    To use an alert with an icon... Read more about icon usage here 
    <Link
      replace={false}
      to="/docs/core/icons"
    >
      here
    </Link>
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Alert
      icon="check_circle"
      text="This is a success alert with an icon!"
      type="success"
    />
    


    <Alert
      icon="info"
      text="This is a neutral alert with an icon!"
      type="neutral"
    />
    


    <Alert
      icon="warning"
      text="This is a warning alert with an icon!"
      type="warning"
    />
    


    <Alert
      icon="error"
      text="This is a danger alert with an icon!"
      type="danger"
    />
    


    <Alert
      icon="info_outline"
      text="This is a light alert with an icon!"
      type="light"
    />
    


    <Alert
      icon="info_outline"
      text="This is a default alert with an icon!"
      type="default"
    />
  </ComponentPreview>
</React.Fragment>
`;

exports[`Documentation: Alerts Alert With Link renders 1`] = `
<React.Fragment>
  <h2
    id="links"
  >
    Links
  </h2>
  <p>
    Alerts with links
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Alert
      linkText="with a link!"
      text="This is a success alert, "
      type="success"
    />
    


    <Alert
      linkText="with a link!"
      text="This is a neutral alert, "
      type="neutral"
    />
    


    <Alert
      linkText="with a link!"
      text="This is a warning alert, "
      type="warning"
    />
    


    <Alert
      linkText="with a link!"
      text="This is a danger alert, "
      type="danger"
    />
    


    <Alert
      linkText="with a link!"
      text="This is a light alert, "
      type="light"
    />
    


    <Alert
      linkText="with a link!"
      text="This is a default alert, "
      type="default"
    />
  </ComponentPreview>
</React.Fragment>
`;

exports[`Documentation: Alerts Alerts Text renders 1`] = `
<div
  className="col-md-12 col-lg-10 doc-body"
>
  <p
    className="lead"
  >
    Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.
  </p>
  <BasicUsage />
  <AlertWithLink />
  <AlertWithIcon />
  <ClosingTheAlert />
  <ExtendedUsage />
</div>
`;

exports[`Documentation: Alerts Basic Usage renders 1`] = `
<React.Fragment>
  <h2
    id="basic-usage"
  >
    Basic usage
  </h2>
  <p>
    Alerts
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Alert
      text="This is a success alert!"
      type="success"
    />
    


    <Alert
      text="This is a neutral alert!"
      type="neutral"
    />
    


    <Alert
      text="This is a warning alert!"
      type="warning"
    />
    


    <Alert
      text="This is a danger alert!"
      type="danger"
    />
    


    <Alert
      text="This is a light alert!"
      type="light"
    />
    


    <Alert
      text="This is a default alert!"
      type="default"
    />
  </ComponentPreview>
</React.Fragment>
`;

exports[`Documentation: Alerts Closing The Alert renders 1`] = `
<React.Fragment>
  <h2
    id="closing-the-alert"
  >
    Closing the alert
  </h2>
  <p>
    To add a close-button, add the following code inside your alert-element:
    <br />
    <PrismCode
      className="language-html"
      component="code"
    >
      &lt;i class="material-icons" data-alert-close&gt;close&lt;/i&gt;
    </PrismCode>
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Alert
      close={true}
      icon="check_circle"
      text="This is a success alert with an icon!"
      type="success"
    />
    


    <Alert
      close={true}
      icon="info"
      text="This is a neutral alert with an icon!"
      type="neutral"
    />
    


    <Alert
      close={true}
      icon="warning"
      text="This is a warning alert with an icon!"
      type="warning"
    />
    


    <Alert
      close={true}
      icon="error"
      text="This is a danger alert with an icon!"
      type="danger"
    />
    


    <Alert
      close={true}
      icon="info_outline"
      text="This is a light alert with an icon!"
      type="light"
    />
    


    <Alert
      close={true}
      icon="info_outline"
      text="This is a default alert with an icon!"
      type="default"
    />
  </ComponentPreview>
  <h3>
    External close button
  </h3>
  <p>
    To add an external close-button for your alert add the attribute 
    <Attribute
      data={true}
      name="alert-close"
      value="[alert ID]"
    />
     to the button element.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Alert
      icon="check_circle"
      id="alert-success-1"
      text="Press the button below to close me"
      type="success"
    />
    


    <button
      className="btn btn-neutral"
      data-alert-close="alert-success-1"
      type="button"
    >
      Close alert
    </button>
  </ComponentPreview>
</React.Fragment>
`;

exports[`Documentation: Alerts Extended Usage renders 1`] = `
<React.Fragment>
  <h2
    id="extended-usage"
  >
    Extended usage
  </h2>
  <p>
    Alerts can also contain additional HTML elements like headings, paragraphs and dividers.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <div
      className="alert alert-success alert-with-icon in"
    >
      

      <i
        className="material-icons"
        data-alert-close=""
      >
        close
      </i>
      

      <i
        className="material-icons alert-icon"
      >
        check_circle
      </i>
      <h3
        className="alert-heading"
      >
        Success!
      </h3>
      <p
        className="alert-text"
      >
        You successfully saw the code example under the Extended usage section.
      </p>
      <p
        className="alert-text"
      >
        This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.
      </p>
      <hr />
      <p
        className="alert-text"
      >
        By the way, great job!
      </p>
    </div>
  </ComponentPreview>
</React.Fragment>
`;

exports[`Documentation: Alerts Usage With Javascript renders 1`] = `
<React.Fragment>
  <h2
    id="usage-with-javascript"
  >
    Usage with javascript
  </h2>
  <p>
    To interact with the alert-component with javascript...
  </p>
  <h3>
    Show alerts
  </h3>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    px.alert.show();
    

    // OR
    

    px.alert.show(id);
  </ComponentPreview>
  <h3>
    Hide alerts
  </h3>
  <ComponentPreview
    codeFigure={true}
    language="javascript"
  >
    px.alert.hide();
    

    // OR
    

    px.alert.hide(id);
  </ComponentPreview>
  <h3>
    Methods
  </h3>
  <table
    className="table table-striped"
  >
    <thead>
      <tr>
        <th>
          Method
        </th>
        <th>
          Description
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <PxScript
            component="alert"
            func="init"
          />
        </td>
        <td>
          Initializes all rendered close-buttons. This is done automatically when the 
          <code
            className="token property"
          >
            px-script.js
          </code>
           loads, but might have to be used if you are not rendering your alerts right away. For instance, in react, you might want to call this function within the 
          <PrismCode
            className="language-javascript"
            component="code"
          >
            componentDidMount()
          </PrismCode>
           method.
        </td>
      </tr>
      <tr>
        <td>
          <PxScript
            component="alert"
            func="show"
          />
        </td>
        <td>
          Gives all rendered alerts the class 
          <code
            className="token property"
          >
            .in
          </code>
          , effectively giving them the css property 
          <PrismCode
            className="language-css"
            component="code"
          >
            display: block;
          </PrismCode>
          .
        </td>
      </tr>
      <tr>
        <td>
          <PxScript
            component="alert"
            func="show"
            params={
              Array [
                "id",
              ]
            }
          />
        </td>
        <td>
          Gives the specified alert the class 
          <code
            className="token property"
          >
            .in
          </code>
          , giving it the css property 
          <PrismCode
            className="language-css"
            component="code"
          >
            display: block;
          </PrismCode>
          . If no alert with the specified id is rendered to the DOM, the method does nothing.
        </td>
      </tr>
      <tr>
        <td>
          <PxScript
            component="alert"
            func="hide"
          />
        </td>
        <td>
          Removes the class 
          <code
            className="token property"
          >
            .in
          </code>
           from all rendered alerts, effectively giving them the css property 
          <PrismCode
            className="language-css"
            component="code"
          >
            display: none;
          </PrismCode>
        </td>
      </tr>
      <tr>
        <td>
          <PxScript
            component="alert"
            func="hide"
            params={
              Array [
                "id",
              ]
            }
          />
        </td>
        <td>
          Removes the class 
          <code
            className="token property"
          >
            .in
          </code>
           from the alert specified by id, giving it the css property 
          <PrismCode
            className="language-css"
            component="code"
          >
            display: none;
          </PrismCode>
          . If no alert with the specified id is rendered to the DOM, the method does nothing.
        </td>
      </tr>
    </tbody>
  </table>
</React.Fragment>
`;

exports[`Documentation: Alerts renders 1`] = `
<div
  className="doc-container"
>
  <div
    className="row"
  >
    <AlertsText />
    <DocToc
      component={[Function]}
    />
  </div>
</div>
`;
