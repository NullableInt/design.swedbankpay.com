// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Documentation: Datepickers DatepickersText renders 1`] = `
<div
  className="col-md-12 col-lg-10 doc-body"
>
  <p
    className="lead"
  >
    Datepickers...
  </p>
  <SimpleDatepicker />
  <InitialValue />
  <CustomFormat />
  <IncludeTime />
  <Required />
  <ShowingMultipleMonths />
  <DateRange />
  <Options />
</div>
`;

exports[`Documentation: Datepickers Options renders 1`] = `
<Fragment>
  <h2
    id="available-options"
  >
    Available options
  </h2>
  <p>
    Options available through 
    <Attribute
      data={true}
      name="datepicker"
    />
    ...
  </p>
   Keep in mind that setting any of these values will render them true, so setting an attribute to 
  <Attribute
    value="false"
  />
   will still render it true.
  <table
    className="table table-striped"
  >
    <thead>
      <tr>
        <th>
          Attribute
        </th>
        <th>
          Default value
        </th>
        <th>
          Description
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <Attribute
            data={true}
            name="datepicker-value"
          />
        </td>
        <td />
        <td>
          Value used to initialize calendar. Set this value with the same format currently set for the datepicker (including time if you have enabled that).
        </td>
      </tr>
      <tr>
        <td>
          <Attribute
            data={true}
            name="datepicker-format"
          />
        </td>
        <td>
          <Attribute
            value="iso8601"
          />
        </td>
        <td>
          <p>
            Format string used for the input field and names for days and months. All have the same time format (HH:mm), and starts the week on monday (1).
          </p>
          <p>
            The following options are available:
          </p>
          <ul
            className="list"
          >
            <li
              className="mb-sm"
            >
              <Attribute
                value="nb"
              />
              : DD.MM.YYYY
            </li>
            <li
              className="mb-sm"
            >
              <Attribute
                value="sv"
              />
              : YYYY-MM-DD
            </li>
            <li
              className="mb-sm"
            >
              <Attribute
                value="da"
              />
              : DD.MM.YYYY
            </li>
            <li
              className="mb-sm"
            >
              <Attribute
                value="fi"
              />
              : DD.MM.YYYY
            </li>
            <li
              className="mb-sm"
            >
              <Attribute
                value="en"
              />
              : DD/MM/YYYY
            </li>
            <li
              className="mb-sm"
            >
              <Attribute
                value="iso8601"
              />
              : YYYY-MM-DD (default)
            </li>
          </ul>
        </td>
      </tr>
      <tr>
        <td>
          <Attribute
            data={true}
            name="datepicker-time"
          />
        </td>
        <td />
        <td>
          If the calendar shows the current time and allows you to change it using a dropdown.
        </td>
      </tr>
      <tr>
        <td>
          <Attribute
            data={true}
            name="datepicker-months"
          />
        </td>
        <td>
          <Attribute
            value="1"
          />
        </td>
        <td>
          Number of months to display in the datepicker.
        </td>
      </tr>
      <tr>
        <td>
          <Attribute
            data={true}
            name="datepicker-min"
          />
        </td>
        <td />
        <td>
          Disallow dates before min.
        </td>
      </tr>
      <tr>
        <td>
          <Attribute
            data={true}
            name="datepicker-max"
          />
        </td>
        <td />
        <td>
          Disallow dates past max.
        </td>
      </tr>
      <tr>
        <td>
          <Attribute
            data={true}
            name="required"
          />
        </td>
        <td />
        <td>
          Forces a value in the input field, but only if an initial value is set or the user clicks/tabs the input.
        </td>
      </tr>
    </tbody>
  </table>
</Fragment>
`;

exports[`Documentation: Datepickers Required renders 1`] = `
<Fragment>
  <h2
    id="required"
  >
    Required
  </h2>
  <p>
    Required.. 
    <Attribute
      data={true}
      name="required"
      value="true"
    />
     will autopopulate the input after clicking it if no date is selected. Keep in mind that if you do not pass a value to the datepicker it will remain blank if the user does not click the input.
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Datepicker
      id="required-datepicker"
      label="Date"
      prefixType="icon"
      prefixValue="event"
      required={true}
    />
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Datepickers ShowingMultipleMonths renders 1`] = `
<Fragment>
  <h2
    id="showing-multiple-months"
  >
    Showing multiple months
  </h2>
  <p>
    Showing multiple months.. 
    <Attribute
      data={true}
      name="datepicker-months"
      value="[number]"
    />
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Datepicker
      id="multiple-months-datepicker"
      label="Date"
      months="2"
      prefixType="icon"
      prefixValue="event"
    />
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Datepickers SimpleDatepicker renders 1`] = `
<Fragment>
  <h2
    id="simple-datepicker"
  >
    Simple datepicker
  </h2>
  <p>
    Simple datepicker..
    <Attribute
      data={true}
      name="datepicker"
    />
    .
  </p>
  <ComponentPreview
    codeFigure={true}
    language="html"
    showCasePanel={true}
  >
    <Datepicker
      id="simle-datepicker"
      label="Date"
      prefixType="icon"
      prefixValue="event"
    />
  </ComponentPreview>
</Fragment>
`;

exports[`Documentation: Datepickers renders 1`] = `
<div
  className="doc-container"
>
  <div
    className="row"
  >
    <DatepickersText />
    <DocToc
      component={[Function]}
    />
  </div>
</div>
`;
