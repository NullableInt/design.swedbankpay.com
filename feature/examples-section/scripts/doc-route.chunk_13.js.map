{"version":3,"sources":["webpack://swedbankpay/./src/App/Documentation/components/InputGroup/index.js","webpack://swedbankpay/(webpack)/buildin/amd-options.js","webpack://swedbankpay/./node_modules/classnames/index.js","webpack://swedbankpay/./src/App/components/InputGroup/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","BasicExample","CheckboxesAndRadios","ButtonAddons","WithSelect","WithFeedbackIcon","ValidationStates","Disabled","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_utils__WEBPACK_IMPORTED_MODULE_1__","react_prism__WEBPACK_IMPORTED_MODULE_2__","react_prism__WEBPACK_IMPORTED_MODULE_2___default","_components_InputGroup__WEBPACK_IMPORTED_MODULE_3__","a","createElement","Fragment","id","className","value","language","showCasePanel","codeFigure","type","label","placeholder","prefixValue","prefixType","postfixValue","removeOuterTag","postfixType","postfixBtnColor","prefixBtnColor","selectOptions","feedbackIcon","validationState","defaultValue","name","disabled","InputGroup","docToc","__webpack_amd_options__","module","exports","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","_typeof","push","Array","isArray","inner","apply","key","call","join","default","define","undefined","__WEBPACK_AMD_DEFINE_RESULT__","window","Addon","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","classnames__WEBPACK_IMPORTED_MODULE_2__","classnames__WEBPACK_IMPORTED_MODULE_2___default","_ref","color","concat","Feedback","_ref2","icon","_ref3","pattern","validate","required","autoComplete","readOnly","helpBlock","errorMessage","successMessage","attrs","data-validate","inputGrpClasses","classnames","htmlFor","map","opt","data-success","data-error","propTypes","PropTypes","string","isRequired","bool","oneOf","array","oneOfType"],"mappings":"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","file":"scripts/doc-route.chunk_13.js?5fbcd47fb8301329ddc0","sourcesContent":["import React from \"react\";\n\nimport { ComponentPreview, DocContainer, Property, Attribute } from \"@docutils\";\nimport PrismCode from \"react-prism\";\nimport InputGroupComponent from \"@components/InputGroup\";\n\nconst BasicExample = () => (\n    <>\n        <h2 id=\"basic-example\">Basic example</h2>\n        <p>\n            Add a <PrismCode className=\"language-html\">{\"<span>\"}</PrismCode> with class <Property value=\".input-group-addon\"/> to get a gray box on the left,\n            right or both sides of an <PrismCode className=\"language-html\">{\"<input>\"}</PrismCode> element. The position of\n            your <Property value=\".input-group-addon\"/> depends on if you place it before or after the <PrismCode className=\"language-html\">{\"<input\"}</PrismCode> element.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure >\n            <InputGroupComponent\n                id=\"input-id-1\"\n                type=\"text\"\n                label=\"Name\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-2\"\n                type=\"text\"\n                label=\"Email\"\n                placeholder=\"Email\"\n                prefixType=\"icon\"\n                prefixValue=\"email\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-3\"\n                type=\"number\"\n                label=\"Amount\"\n                placeholder=\"Rounded to nearest $\"\n                prefixType=\"icon\"\n                prefixValue=\"attach_money\"\n                postfixValue=\".00\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                id=\"input-id-4\"\n                type=\"textarea\"\n                label=\"Notes\"\n                placeholder=\"Special requests\"\n                prefixType=\"icon\"\n                prefixValue=\"format_quote\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst CheckboxesAndRadios = () => (\n    <>\n        <h2 id=\"checkboxes-and-radios\">Checkboxes and radios</h2>\n        <p>Place any checkbox or radio option within an input group’s addon instead of text.</p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <div className=\"form-group\">\n                <div className=\"input-group\">{\"\\n\"}\n                    <span className=\"input-group-addon\">{\"\\n\\t\\t\"}\n                        <input type=\"checkbox\"/>{\"\\n\\t\"}\n                    </span>{\"\\n\"}\n                    <input type=\"text\" className=\"form-control\" />{\"\\n\"}\n                </div>\n            </div>{\"\\n\\n\"}\n            <div className=\"form-group\">\n                <div className=\"input-group\">{\"\\n\"}\n                    <span className=\"input-group-addon\">{\"\\n\\t\\t\"}\n                        <input type=\"radio\"/>{\"\\n\\t\"}\n                    </span>{\"\\n\"}\n                    <input type=\"text\" className=\"form-control\" />{\"\\n\"}\n                </div>\n            </div>\n        </ComponentPreview>\n    </>\n);\n\nconst ButtonAddons = () => (\n    <>\n        <h2 id=\"button-addons\">Button addons</h2>\n        <p>\n            If you want <PrismCode className=\"language-html\">{\"<button>\"}</PrismCode>s included with your input elements you can just add a <PrismCode className=\"language-html\">{\"<button>\"}</PrismCode> inside\n            a input-group like you would anywhere else.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"text\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"executive\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                type=\"text\"\n                prefixType=\"button\"\n                prefixValue=\"Button\"\n                prefixBtnColor=\"guiding\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"destructive\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst WithSelect = () => (\n    <>\n        <h2 id=\"with-select\">With select</h2>\n        <p>\n            Inserting text next to a <PrismCode className=\"language-html\">{\"<select>\"}</PrismCode> works just like any other input element.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"select\"\n                selectOptions={[\"Bounty hunter\", \"Smuggler\", \"Jedi\"]}\n                prefixValue=\"Profession\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst WithFeedbackIcon = () => (\n    <>\n        <h2 id=\"with-feedback\">With feedback</h2>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                id=\"input-with-feedback-1\"\n                type=\"text\"\n                label=\"Name\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n                feedbackIcon=\"cancel\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst ValidationStates = () => (\n    <>\n        <h2 id=\"validation-states\">Validation states</h2>\n        <p>\n            You can also visualize validation on your input-groups. Just add <Property value=\".has-success\" /> or <Property value=\".has-error\" /> with a <Property value=\".input-group\" />.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                type=\"text\"\n                validationState=\"success\"\n                placeholder=\"Name\"\n                prefixValue=\"Mr.\"\n                defaultValue=\"Anderson\"\n            /> {\"\\n\\n\"}\n            <InputGroupComponent\n                type=\"text\"\n                validationState=\"error\"\n                placeholder=\"Name\"\n                prefixValue=\"Agent\"\n                defaultValue=\"Smith\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst Disabled = () => (\n    <>\n        <h2 id=\"disabled\">Disabled</h2>\n        <p>\n            Just like for forms you can add <Attribute name=\"disabled\" /> to an input element to disable it.\n            If you are going to disable an element in a <Property value=\".input-group\" /> make sure to also add the <Attribute name=\"disabled\"/> attribute to the buttons.\n        </p>\n        <ComponentPreview language=\"html\" showCasePanel codeFigure removeOuterTag>\n            <InputGroupComponent\n                id=\"input-id-3\"\n                type=\"number\"\n                label=\"Amount\"\n                placeholder=\"Rounded to nearest $\"\n                disabled\n                prefixType=\"icon\"\n                prefixValue=\"attach_money\"\n                postfixValue=\".00\"\n            />\n            <InputGroupComponent\n                type=\"text\"\n                disabled\n                prefixType=\"button\"\n                prefixValue=\"Button\"\n                prefixBtnColor=\"guiding\"\n                postfixType=\"button\"\n                postfixValue=\"Button\"\n                postfixBtnColor=\"destructive\"\n            />\n        </ComponentPreview>\n    </>\n);\n\nconst InputGroup = () => (\n    <DocContainer docToc>\n        <p className=\"lead\">\n            You can include additional information to specific input elements by adding <PrismCode className=\"language-html\">{\"<span>\"}</PrismCode>s\n            or <PrismCode className=\"language-html\">{\"<button>\"}</PrismCode>s in a <Property value=\".input-group\" />.\n        </p>\n        <BasicExample />\n        <ButtonAddons />\n        <WithSelect />\n        <ValidationStates />\n        <Disabled />\n    </DocContainer>\n);\n\nexport default InputGroup;\n\n/* For testing */\nexport { BasicExample, CheckboxesAndRadios, ButtonAddons, WithSelect, WithFeedbackIcon, ValidationStates, Disabled };\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nexport const Addon = ({ type, value, color, disabled }) => (\n    (type === \"button\") ?\n        <button type=\"button\" className={`btn btn-${color}`} disabled={disabled}>\n            {value}\n        </button>\n        : <span className=\"input-group-addon\">{(type === \"icon\") ? <i className=\"material-icons\">{value}</i> : value}</span>\n);\n\nconst Feedback = ({ icon }) => (\n    <span className=\"form-control-feedback\">{\"\\n\\t\\t\"}\n        <i className=\"material-icons\">{icon}</i>{\"\\n\\t\"}\n    </span>\n);\n\nconst InputGroup = ({\n    id,\n    type,\n    placeholder,\n    pattern,\n    validate,\n    required,\n    defaultValue,\n    autoComplete,\n    disabled,\n    readOnly,\n    label,\n    validationState,\n    selectOptions,\n    prefixValue,\n    prefixType,\n    prefixBtnColor,\n    postfixValue,\n    postfixType,\n    postfixBtnColor,\n    feedbackIcon,\n    helpBlock,\n    errorMessage,\n    successMessage\n}) => {\n    const attrs = {\n        type: type || null,\n        className: \"form-control\",\n        id: id || null,\n        placeholder: placeholder || null,\n        defaultValue: defaultValue || \"\",\n        disabled: disabled || null,\n        readOnly: readOnly || null,\n        autoComplete: autoComplete || null,\n        required: required || null,\n        pattern: pattern ? \"\" : null,\n        \"data-validate\": validate ? \"\" : null\n    };\n\n    const inputGrpClasses = classnames(\n        \"input-group\",\n        validationState ? `has-${validationState}` : null,\n        feedbackIcon ? \"has-feedback\" : null\n    );\n\n    return (\n        <div className=\"form-group\">{\"\\n\"}\n            {label ? <label htmlFor={id}>{label}</label> : null}{label ? \"\\n\" : null}\n            <div className={inputGrpClasses}>{\"\\n\"}\n                {prefixValue ? <Addon type={prefixType} value={prefixValue} color={prefixBtnColor} disabled={disabled} /> : null }{prefixValue ? \"\\n\" : null}\n                {type === \"textarea\" ?\n                    <textarea {...attrs}></textarea>\n                    : type === \"select\" ?\n                        <select className=\"form-control\" disabled={disabled} readOnly={readOnly}>{\"\\n\\t\\t\"}\n                            {selectOptions.map((opt, i) => (\n                                <Fragment key={opt + i}>\n                                    <option>{opt}</option>{(i !== selectOptions.length - 1) ? \"\\n\\t\\t\" : \"\"}\n                                </Fragment>\n                            ))}{\"\\n\\t\"}\n                        </select>\n                        :\n                        <input {...attrs} />}\n                {\"\\n\"}\n                {feedbackIcon ? <Feedback icon={feedbackIcon} /> : null} {feedbackIcon ? \"\\n\" : null}\n                {postfixValue ? <Addon type={postfixType} value={postfixValue} color={postfixBtnColor} disabled={disabled} /> : null }{postfixValue ? \"\\n\" : null}\n            </div>\n            {helpBlock ? <div className=\"help-block\" data-success={successMessage || null} data-error={errorMessage || null}>{helpBlock}</div> : null}\n        </div>\n    );\n};\n\nInputGroup.propTypes = {\n    type: PropTypes.string.isRequired,\n    id: PropTypes.string,\n    placeholder: PropTypes.string,\n    pattern: PropTypes.string,\n    validate: PropTypes.bool,\n    required: PropTypes.bool,\n    defaultValue: PropTypes.string,\n    autoComplete: PropTypes.string,\n    disabled: PropTypes.bool,\n    readOnly: PropTypes.bool,\n    label: PropTypes.string,\n    validationState: PropTypes.oneOf([\"success\", \"error\", \"\"]),\n    selectOptions: PropTypes.array,\n    prefixValue: PropTypes.string,\n    prefixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    prefixBtnColor: PropTypes.oneOf([\"executive\", \"guiding\", \"destructive\"]),\n    postfixValue: PropTypes.string,\n    postfixType: PropTypes.oneOf([\"button\", \"icon\", \"\"]),\n    postfixBtnColor: PropTypes.oneOf([\"executive\", \"guiding\", \"destructive\"]),\n    feedbackIcon: PropTypes.string,\n    helpBlock: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool\n    ]),\n    errorMessage: PropTypes.string,\n    successMessage: PropTypes.string\n};\n\nexport default InputGroup;\n"],"sourceRoot":""}